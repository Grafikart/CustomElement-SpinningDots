export default class SpinningDots extends HTMLElement{static get observedAttributes(){return["dots"]}constructor(){super(),this.root=this.attachShadow({mode:"open"})}connectedCallback(){const a=window.getComputedStyle(this),b=this.intFromPx(a.width,28),c=this.intFromPx(a.strokeWidth,4/28*b,1),d=this.intFromPx(this.getAttribute("dots"),8);this.root.innerHTML=`<div>${this.buildStyles(b,d,c)}<svg class="circles" viewBox="0 0 ${b} ${b}" fill="none" xmlns="http://www.w3.org/2000/svg">${this.buildCircles(b,d,c/2)}</svg>${this.buildTrail(b,c)}</div>`}attributeChangedCallback(){const a=window.getComputedStyle(this),b=this.intFromPx(a.width,28),c=this.intFromPx(this.getAttribute("dots"),8),d=this.intFromPx(a.strokeWidth,4/28*b,1);if(null!=this.root.querySelector(".circles"));this.root.querySelector(".circles").innerHTML=this.buildCircles(b,c,d/2)}disconnectedCallback(){this.root.innerHTML=""}buildCircles(b,c,d){const e=b/2-d;let f="";for(let g=0;g<c;g++){const h=Math.PI/(c/2)*g,a=e*Math.sin(h)+b/2,i=e*Math.cos(h)+b/2;f+=`<circle cx="${a}" cy="${i}" r="${d}" fill="currentColor"/>`}return f}buildTrail(a,b){return`<svg class="halo" viewBox="0 0 ${a} ${a}" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="${a/2}" cy="${a/2}" r="${a/2-b/2}" stroke-width="${b}" stroke-linecap="round" stroke="currentColor"/></svg>`}buildStyles(a,b,c){const d=Math.PI*(a-c);return`<style>:host{display:inline-block;width:${a}px;height:${a}px}div{animation:fadeIn .4s cubic-bezier(.1,.6,.3,1);position:relative;width:100%;height:100%}svg{position:absolute;top:0;left:0}.circles{animation:spin 16s linear infinite}.halo{animation:spin2 1.6s cubic-bezier(.5,.15,.5,.85) infinite}.halo circle{stroke-dasharray:${d};stroke-dashoffset:${d+d/b};animation:trail 1.6s cubic-bezier(.5,.15,.5,.85) infinite}@keyframes spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}@keyframes spin2{from{transform:rotate(0deg)}to{transform:rotate(720deg)}}@keyframes trail{0%{stroke-dashoffset:${d+d/b}}50%{stroke-dashoffset:${d+2.5*d/b}}100%{stroke-dashoffset:${d+d/b}}}@keyframes fadeIn{from{opacity:0;transform:scale(.1)}to{opacity:1;transform:scale(1)}}</style>`}intFromPx(a,b,c=0){return null===a||void 0===a?b:(a=parseInt(a.replace("px",""),10),a>c?a:b)}}